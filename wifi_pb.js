// source: wifi.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.CmdApplyConfig', null, global);
goog.exportSymbol('proto.CmdCtrlReprov', null, global);
goog.exportSymbol('proto.CmdCtrlReset', null, global);
goog.exportSymbol('proto.CmdGetStatus', null, global);
goog.exportSymbol('proto.CmdScanResult', null, global);
goog.exportSymbol('proto.CmdScanStart', null, global);
goog.exportSymbol('proto.CmdScanStatus', null, global);
goog.exportSymbol('proto.CmdSetConfig', null, global);
goog.exportSymbol('proto.RespApplyConfig', null, global);
goog.exportSymbol('proto.RespCtrlReprov', null, global);
goog.exportSymbol('proto.RespCtrlReset', null, global);
goog.exportSymbol('proto.RespGetStatus', null, global);
goog.exportSymbol('proto.RespGetStatus.StateCase', null, global);
goog.exportSymbol('proto.RespScanResult', null, global);
goog.exportSymbol('proto.RespScanStart', null, global);
goog.exportSymbol('proto.RespScanStatus', null, global);
goog.exportSymbol('proto.RespSetConfig', null, global);
goog.exportSymbol('proto.Status', null, global);
goog.exportSymbol('proto.WiFiConfigMsgType', null, global);
goog.exportSymbol('proto.WiFiConfigPayload', null, global);
goog.exportSymbol('proto.WiFiConfigPayload.PayloadCase', null, global);
goog.exportSymbol('proto.WiFiCtrlMsgType', null, global);
goog.exportSymbol('proto.WiFiCtrlPayload', null, global);
goog.exportSymbol('proto.WiFiCtrlPayload.PayloadCase', null, global);
goog.exportSymbol('proto.WiFiScanMsgType', null, global);
goog.exportSymbol('proto.WiFiScanPayload', null, global);
goog.exportSymbol('proto.WiFiScanPayload.PayloadCase', null, global);
goog.exportSymbol('proto.WiFiScanResult', null, global);
goog.exportSymbol('proto.WifiAuthMode', null, global);
goog.exportSymbol('proto.WifiConnectFailedReason', null, global);
goog.exportSymbol('proto.WifiConnectedState', null, global);
goog.exportSymbol('proto.WifiStationState', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WifiConnectedState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WifiConnectedState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.WifiConnectedState.displayName = 'proto.WifiConnectedState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CmdCtrlReset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CmdCtrlReset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CmdCtrlReset.displayName = 'proto.CmdCtrlReset';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RespCtrlReset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RespCtrlReset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RespCtrlReset.displayName = 'proto.RespCtrlReset';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CmdCtrlReprov = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CmdCtrlReprov, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CmdCtrlReprov.displayName = 'proto.CmdCtrlReprov';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RespCtrlReprov = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RespCtrlReprov, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RespCtrlReprov.displayName = 'proto.RespCtrlReprov';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WiFiCtrlPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.WiFiCtrlPayload.oneofGroups_);
};
goog.inherits(proto.WiFiCtrlPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.WiFiCtrlPayload.displayName = 'proto.WiFiCtrlPayload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CmdGetStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CmdGetStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CmdGetStatus.displayName = 'proto.CmdGetStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RespGetStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.RespGetStatus.oneofGroups_);
};
goog.inherits(proto.RespGetStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RespGetStatus.displayName = 'proto.RespGetStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CmdSetConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CmdSetConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CmdSetConfig.displayName = 'proto.CmdSetConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RespSetConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RespSetConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RespSetConfig.displayName = 'proto.RespSetConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CmdApplyConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CmdApplyConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CmdApplyConfig.displayName = 'proto.CmdApplyConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RespApplyConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RespApplyConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RespApplyConfig.displayName = 'proto.RespApplyConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WiFiConfigPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.WiFiConfigPayload.oneofGroups_);
};
goog.inherits(proto.WiFiConfigPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.WiFiConfigPayload.displayName = 'proto.WiFiConfigPayload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CmdScanStart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CmdScanStart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CmdScanStart.displayName = 'proto.CmdScanStart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RespScanStart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RespScanStart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RespScanStart.displayName = 'proto.RespScanStart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CmdScanStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CmdScanStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CmdScanStatus.displayName = 'proto.CmdScanStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RespScanStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RespScanStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RespScanStatus.displayName = 'proto.RespScanStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CmdScanResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CmdScanResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CmdScanResult.displayName = 'proto.CmdScanResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WiFiScanResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WiFiScanResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.WiFiScanResult.displayName = 'proto.WiFiScanResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RespScanResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.RespScanResult.repeatedFields_, null);
};
goog.inherits(proto.RespScanResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RespScanResult.displayName = 'proto.RespScanResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WiFiScanPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.WiFiScanPayload.oneofGroups_);
};
goog.inherits(proto.WiFiScanPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.WiFiScanPayload.displayName = 'proto.WiFiScanPayload';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WifiConnectedState.prototype.toObject = function(opt_includeInstance) {
  return proto.WifiConnectedState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WifiConnectedState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WifiConnectedState.toObject = function(includeInstance, msg) {
  var f, obj = {
    ip4Addr: jspb.Message.getFieldWithDefault(msg, 1, ""),
    authMode: jspb.Message.getFieldWithDefault(msg, 2, 0),
    ssid: msg.getSsid_asB64(),
    bssid: msg.getBssid_asB64(),
    channel: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WifiConnectedState}
 */
proto.WifiConnectedState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WifiConnectedState;
  return proto.WifiConnectedState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WifiConnectedState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WifiConnectedState}
 */
proto.WifiConnectedState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp4Addr(value);
      break;
    case 2:
      var value = /** @type {!proto.WifiAuthMode} */ (reader.readEnum());
      msg.setAuthMode(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSsid(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBssid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChannel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WifiConnectedState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WifiConnectedState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WifiConnectedState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WifiConnectedState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIp4Addr();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAuthMode();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSsid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getBssid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getChannel();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional string ip4_addr = 1;
 * @return {string}
 */
proto.WifiConnectedState.prototype.getIp4Addr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.WifiConnectedState} returns this
 */
proto.WifiConnectedState.prototype.setIp4Addr = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional WifiAuthMode auth_mode = 2;
 * @return {!proto.WifiAuthMode}
 */
proto.WifiConnectedState.prototype.getAuthMode = function() {
  return /** @type {!proto.WifiAuthMode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.WifiAuthMode} value
 * @return {!proto.WifiConnectedState} returns this
 */
proto.WifiConnectedState.prototype.setAuthMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bytes ssid = 3;
 * @return {!(string|Uint8Array)}
 */
proto.WifiConnectedState.prototype.getSsid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes ssid = 3;
 * This is a type-conversion wrapper around `getSsid()`
 * @return {string}
 */
proto.WifiConnectedState.prototype.getSsid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSsid()));
};


/**
 * optional bytes ssid = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSsid()`
 * @return {!Uint8Array}
 */
proto.WifiConnectedState.prototype.getSsid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSsid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.WifiConnectedState} returns this
 */
proto.WifiConnectedState.prototype.setSsid = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes bssid = 4;
 * @return {!(string|Uint8Array)}
 */
proto.WifiConnectedState.prototype.getBssid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes bssid = 4;
 * This is a type-conversion wrapper around `getBssid()`
 * @return {string}
 */
proto.WifiConnectedState.prototype.getBssid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBssid()));
};


/**
 * optional bytes bssid = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBssid()`
 * @return {!Uint8Array}
 */
proto.WifiConnectedState.prototype.getBssid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBssid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.WifiConnectedState} returns this
 */
proto.WifiConnectedState.prototype.setBssid = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional int32 channel = 5;
 * @return {number}
 */
proto.WifiConnectedState.prototype.getChannel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.WifiConnectedState} returns this
 */
proto.WifiConnectedState.prototype.setChannel = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CmdCtrlReset.prototype.toObject = function(opt_includeInstance) {
  return proto.CmdCtrlReset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CmdCtrlReset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CmdCtrlReset.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CmdCtrlReset}
 */
proto.CmdCtrlReset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CmdCtrlReset;
  return proto.CmdCtrlReset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CmdCtrlReset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CmdCtrlReset}
 */
proto.CmdCtrlReset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CmdCtrlReset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CmdCtrlReset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CmdCtrlReset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CmdCtrlReset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RespCtrlReset.prototype.toObject = function(opt_includeInstance) {
  return proto.RespCtrlReset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RespCtrlReset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RespCtrlReset.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RespCtrlReset}
 */
proto.RespCtrlReset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RespCtrlReset;
  return proto.RespCtrlReset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RespCtrlReset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RespCtrlReset}
 */
proto.RespCtrlReset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RespCtrlReset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RespCtrlReset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RespCtrlReset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RespCtrlReset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CmdCtrlReprov.prototype.toObject = function(opt_includeInstance) {
  return proto.CmdCtrlReprov.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CmdCtrlReprov} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CmdCtrlReprov.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CmdCtrlReprov}
 */
proto.CmdCtrlReprov.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CmdCtrlReprov;
  return proto.CmdCtrlReprov.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CmdCtrlReprov} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CmdCtrlReprov}
 */
proto.CmdCtrlReprov.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CmdCtrlReprov.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CmdCtrlReprov.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CmdCtrlReprov} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CmdCtrlReprov.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RespCtrlReprov.prototype.toObject = function(opt_includeInstance) {
  return proto.RespCtrlReprov.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RespCtrlReprov} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RespCtrlReprov.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RespCtrlReprov}
 */
proto.RespCtrlReprov.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RespCtrlReprov;
  return proto.RespCtrlReprov.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RespCtrlReprov} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RespCtrlReprov}
 */
proto.RespCtrlReprov.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RespCtrlReprov.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RespCtrlReprov.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RespCtrlReprov} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RespCtrlReprov.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.WiFiCtrlPayload.oneofGroups_ = [[11,12,13,14]];

/**
 * @enum {number}
 */
proto.WiFiCtrlPayload.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  CMD_CTRL_RESET: 11,
  RESP_CTRL_RESET: 12,
  CMD_CTRL_REPROV: 13,
  RESP_CTRL_REPROV: 14
};

/**
 * @return {proto.WiFiCtrlPayload.PayloadCase}
 */
proto.WiFiCtrlPayload.prototype.getPayloadCase = function() {
  return /** @type {proto.WiFiCtrlPayload.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.WiFiCtrlPayload.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WiFiCtrlPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.WiFiCtrlPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WiFiCtrlPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WiFiCtrlPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    msg: jspb.Message.getFieldWithDefault(msg, 1, 0),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    cmdCtrlReset: (f = msg.getCmdCtrlReset()) && proto.CmdCtrlReset.toObject(includeInstance, f),
    respCtrlReset: (f = msg.getRespCtrlReset()) && proto.RespCtrlReset.toObject(includeInstance, f),
    cmdCtrlReprov: (f = msg.getCmdCtrlReprov()) && proto.CmdCtrlReprov.toObject(includeInstance, f),
    respCtrlReprov: (f = msg.getRespCtrlReprov()) && proto.RespCtrlReprov.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WiFiCtrlPayload}
 */
proto.WiFiCtrlPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WiFiCtrlPayload;
  return proto.WiFiCtrlPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WiFiCtrlPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WiFiCtrlPayload}
 */
proto.WiFiCtrlPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.WiFiCtrlMsgType} */ (reader.readEnum());
      msg.setMsg(value);
      break;
    case 2:
      var value = /** @type {!proto.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 11:
      var value = new proto.CmdCtrlReset;
      reader.readMessage(value,proto.CmdCtrlReset.deserializeBinaryFromReader);
      msg.setCmdCtrlReset(value);
      break;
    case 12:
      var value = new proto.RespCtrlReset;
      reader.readMessage(value,proto.RespCtrlReset.deserializeBinaryFromReader);
      msg.setRespCtrlReset(value);
      break;
    case 13:
      var value = new proto.CmdCtrlReprov;
      reader.readMessage(value,proto.CmdCtrlReprov.deserializeBinaryFromReader);
      msg.setCmdCtrlReprov(value);
      break;
    case 14:
      var value = new proto.RespCtrlReprov;
      reader.readMessage(value,proto.RespCtrlReprov.deserializeBinaryFromReader);
      msg.setRespCtrlReprov(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WiFiCtrlPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WiFiCtrlPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WiFiCtrlPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WiFiCtrlPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsg();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCmdCtrlReset();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.CmdCtrlReset.serializeBinaryToWriter
    );
  }
  f = message.getRespCtrlReset();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.RespCtrlReset.serializeBinaryToWriter
    );
  }
  f = message.getCmdCtrlReprov();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.CmdCtrlReprov.serializeBinaryToWriter
    );
  }
  f = message.getRespCtrlReprov();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.RespCtrlReprov.serializeBinaryToWriter
    );
  }
};


/**
 * optional WiFiCtrlMsgType msg = 1;
 * @return {!proto.WiFiCtrlMsgType}
 */
proto.WiFiCtrlPayload.prototype.getMsg = function() {
  return /** @type {!proto.WiFiCtrlMsgType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.WiFiCtrlMsgType} value
 * @return {!proto.WiFiCtrlPayload} returns this
 */
proto.WiFiCtrlPayload.prototype.setMsg = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {!proto.Status}
 */
proto.WiFiCtrlPayload.prototype.getStatus = function() {
  return /** @type {!proto.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Status} value
 * @return {!proto.WiFiCtrlPayload} returns this
 */
proto.WiFiCtrlPayload.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional CmdCtrlReset cmd_ctrl_reset = 11;
 * @return {?proto.CmdCtrlReset}
 */
proto.WiFiCtrlPayload.prototype.getCmdCtrlReset = function() {
  return /** @type{?proto.CmdCtrlReset} */ (
    jspb.Message.getWrapperField(this, proto.CmdCtrlReset, 11));
};


/**
 * @param {?proto.CmdCtrlReset|undefined} value
 * @return {!proto.WiFiCtrlPayload} returns this
*/
proto.WiFiCtrlPayload.prototype.setCmdCtrlReset = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.WiFiCtrlPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.WiFiCtrlPayload} returns this
 */
proto.WiFiCtrlPayload.prototype.clearCmdCtrlReset = function() {
  return this.setCmdCtrlReset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WiFiCtrlPayload.prototype.hasCmdCtrlReset = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional RespCtrlReset resp_ctrl_reset = 12;
 * @return {?proto.RespCtrlReset}
 */
proto.WiFiCtrlPayload.prototype.getRespCtrlReset = function() {
  return /** @type{?proto.RespCtrlReset} */ (
    jspb.Message.getWrapperField(this, proto.RespCtrlReset, 12));
};


/**
 * @param {?proto.RespCtrlReset|undefined} value
 * @return {!proto.WiFiCtrlPayload} returns this
*/
proto.WiFiCtrlPayload.prototype.setRespCtrlReset = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.WiFiCtrlPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.WiFiCtrlPayload} returns this
 */
proto.WiFiCtrlPayload.prototype.clearRespCtrlReset = function() {
  return this.setRespCtrlReset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WiFiCtrlPayload.prototype.hasRespCtrlReset = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional CmdCtrlReprov cmd_ctrl_reprov = 13;
 * @return {?proto.CmdCtrlReprov}
 */
proto.WiFiCtrlPayload.prototype.getCmdCtrlReprov = function() {
  return /** @type{?proto.CmdCtrlReprov} */ (
    jspb.Message.getWrapperField(this, proto.CmdCtrlReprov, 13));
};


/**
 * @param {?proto.CmdCtrlReprov|undefined} value
 * @return {!proto.WiFiCtrlPayload} returns this
*/
proto.WiFiCtrlPayload.prototype.setCmdCtrlReprov = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.WiFiCtrlPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.WiFiCtrlPayload} returns this
 */
proto.WiFiCtrlPayload.prototype.clearCmdCtrlReprov = function() {
  return this.setCmdCtrlReprov(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WiFiCtrlPayload.prototype.hasCmdCtrlReprov = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional RespCtrlReprov resp_ctrl_reprov = 14;
 * @return {?proto.RespCtrlReprov}
 */
proto.WiFiCtrlPayload.prototype.getRespCtrlReprov = function() {
  return /** @type{?proto.RespCtrlReprov} */ (
    jspb.Message.getWrapperField(this, proto.RespCtrlReprov, 14));
};


/**
 * @param {?proto.RespCtrlReprov|undefined} value
 * @return {!proto.WiFiCtrlPayload} returns this
*/
proto.WiFiCtrlPayload.prototype.setRespCtrlReprov = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.WiFiCtrlPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.WiFiCtrlPayload} returns this
 */
proto.WiFiCtrlPayload.prototype.clearRespCtrlReprov = function() {
  return this.setRespCtrlReprov(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WiFiCtrlPayload.prototype.hasRespCtrlReprov = function() {
  return jspb.Message.getField(this, 14) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CmdGetStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.CmdGetStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CmdGetStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CmdGetStatus.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CmdGetStatus}
 */
proto.CmdGetStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CmdGetStatus;
  return proto.CmdGetStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CmdGetStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CmdGetStatus}
 */
proto.CmdGetStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CmdGetStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CmdGetStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CmdGetStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CmdGetStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.RespGetStatus.oneofGroups_ = [[10,11]];

/**
 * @enum {number}
 */
proto.RespGetStatus.StateCase = {
  STATE_NOT_SET: 0,
  FAIL_REASON: 10,
  CONNECTED: 11
};

/**
 * @return {proto.RespGetStatus.StateCase}
 */
proto.RespGetStatus.prototype.getStateCase = function() {
  return /** @type {proto.RespGetStatus.StateCase} */(jspb.Message.computeOneofCase(this, proto.RespGetStatus.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RespGetStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.RespGetStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RespGetStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RespGetStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    staState: jspb.Message.getFieldWithDefault(msg, 2, 0),
    failReason: jspb.Message.getFieldWithDefault(msg, 10, 0),
    connected: (f = msg.getConnected()) && proto.WifiConnectedState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RespGetStatus}
 */
proto.RespGetStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RespGetStatus;
  return proto.RespGetStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RespGetStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RespGetStatus}
 */
proto.RespGetStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {!proto.WifiStationState} */ (reader.readEnum());
      msg.setStaState(value);
      break;
    case 10:
      var value = /** @type {!proto.WifiConnectFailedReason} */ (reader.readEnum());
      msg.setFailReason(value);
      break;
    case 11:
      var value = new proto.WifiConnectedState;
      reader.readMessage(value,proto.WifiConnectedState.deserializeBinaryFromReader);
      msg.setConnected(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RespGetStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RespGetStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RespGetStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RespGetStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getStaState();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {!proto.WifiConnectFailedReason} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getConnected();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.WifiConnectedState.serializeBinaryToWriter
    );
  }
};


/**
 * optional Status status = 1;
 * @return {!proto.Status}
 */
proto.RespGetStatus.prototype.getStatus = function() {
  return /** @type {!proto.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.Status} value
 * @return {!proto.RespGetStatus} returns this
 */
proto.RespGetStatus.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional WifiStationState sta_state = 2;
 * @return {!proto.WifiStationState}
 */
proto.RespGetStatus.prototype.getStaState = function() {
  return /** @type {!proto.WifiStationState} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.WifiStationState} value
 * @return {!proto.RespGetStatus} returns this
 */
proto.RespGetStatus.prototype.setStaState = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional WifiConnectFailedReason fail_reason = 10;
 * @return {!proto.WifiConnectFailedReason}
 */
proto.RespGetStatus.prototype.getFailReason = function() {
  return /** @type {!proto.WifiConnectFailedReason} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.WifiConnectFailedReason} value
 * @return {!proto.RespGetStatus} returns this
 */
proto.RespGetStatus.prototype.setFailReason = function(value) {
  return jspb.Message.setOneofField(this, 10, proto.RespGetStatus.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.RespGetStatus} returns this
 */
proto.RespGetStatus.prototype.clearFailReason = function() {
  return jspb.Message.setOneofField(this, 10, proto.RespGetStatus.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RespGetStatus.prototype.hasFailReason = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional WifiConnectedState connected = 11;
 * @return {?proto.WifiConnectedState}
 */
proto.RespGetStatus.prototype.getConnected = function() {
  return /** @type{?proto.WifiConnectedState} */ (
    jspb.Message.getWrapperField(this, proto.WifiConnectedState, 11));
};


/**
 * @param {?proto.WifiConnectedState|undefined} value
 * @return {!proto.RespGetStatus} returns this
*/
proto.RespGetStatus.prototype.setConnected = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.RespGetStatus.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RespGetStatus} returns this
 */
proto.RespGetStatus.prototype.clearConnected = function() {
  return this.setConnected(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RespGetStatus.prototype.hasConnected = function() {
  return jspb.Message.getField(this, 11) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CmdSetConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.CmdSetConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CmdSetConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CmdSetConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    ssid: msg.getSsid_asB64(),
    passphrase: msg.getPassphrase_asB64(),
    bssid: msg.getBssid_asB64(),
    channel: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CmdSetConfig}
 */
proto.CmdSetConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CmdSetConfig;
  return proto.CmdSetConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CmdSetConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CmdSetConfig}
 */
proto.CmdSetConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSsid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPassphrase(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBssid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChannel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CmdSetConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CmdSetConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CmdSetConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CmdSetConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSsid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPassphrase_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getBssid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getChannel();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional bytes ssid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.CmdSetConfig.prototype.getSsid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes ssid = 1;
 * This is a type-conversion wrapper around `getSsid()`
 * @return {string}
 */
proto.CmdSetConfig.prototype.getSsid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSsid()));
};


/**
 * optional bytes ssid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSsid()`
 * @return {!Uint8Array}
 */
proto.CmdSetConfig.prototype.getSsid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSsid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.CmdSetConfig} returns this
 */
proto.CmdSetConfig.prototype.setSsid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes passphrase = 2;
 * @return {!(string|Uint8Array)}
 */
proto.CmdSetConfig.prototype.getPassphrase = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes passphrase = 2;
 * This is a type-conversion wrapper around `getPassphrase()`
 * @return {string}
 */
proto.CmdSetConfig.prototype.getPassphrase_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPassphrase()));
};


/**
 * optional bytes passphrase = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPassphrase()`
 * @return {!Uint8Array}
 */
proto.CmdSetConfig.prototype.getPassphrase_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPassphrase()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.CmdSetConfig} returns this
 */
proto.CmdSetConfig.prototype.setPassphrase = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes bssid = 3;
 * @return {!(string|Uint8Array)}
 */
proto.CmdSetConfig.prototype.getBssid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes bssid = 3;
 * This is a type-conversion wrapper around `getBssid()`
 * @return {string}
 */
proto.CmdSetConfig.prototype.getBssid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBssid()));
};


/**
 * optional bytes bssid = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBssid()`
 * @return {!Uint8Array}
 */
proto.CmdSetConfig.prototype.getBssid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBssid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.CmdSetConfig} returns this
 */
proto.CmdSetConfig.prototype.setBssid = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional int32 channel = 4;
 * @return {number}
 */
proto.CmdSetConfig.prototype.getChannel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.CmdSetConfig} returns this
 */
proto.CmdSetConfig.prototype.setChannel = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RespSetConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.RespSetConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RespSetConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RespSetConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RespSetConfig}
 */
proto.RespSetConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RespSetConfig;
  return proto.RespSetConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RespSetConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RespSetConfig}
 */
proto.RespSetConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RespSetConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RespSetConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RespSetConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RespSetConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional Status status = 1;
 * @return {!proto.Status}
 */
proto.RespSetConfig.prototype.getStatus = function() {
  return /** @type {!proto.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.Status} value
 * @return {!proto.RespSetConfig} returns this
 */
proto.RespSetConfig.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CmdApplyConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.CmdApplyConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CmdApplyConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CmdApplyConfig.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CmdApplyConfig}
 */
proto.CmdApplyConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CmdApplyConfig;
  return proto.CmdApplyConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CmdApplyConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CmdApplyConfig}
 */
proto.CmdApplyConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CmdApplyConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CmdApplyConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CmdApplyConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CmdApplyConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RespApplyConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.RespApplyConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RespApplyConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RespApplyConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RespApplyConfig}
 */
proto.RespApplyConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RespApplyConfig;
  return proto.RespApplyConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RespApplyConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RespApplyConfig}
 */
proto.RespApplyConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RespApplyConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RespApplyConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RespApplyConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RespApplyConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional Status status = 1;
 * @return {!proto.Status}
 */
proto.RespApplyConfig.prototype.getStatus = function() {
  return /** @type {!proto.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.Status} value
 * @return {!proto.RespApplyConfig} returns this
 */
proto.RespApplyConfig.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.WiFiConfigPayload.oneofGroups_ = [[10,11,12,13,14,15]];

/**
 * @enum {number}
 */
proto.WiFiConfigPayload.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  CMD_GET_STATUS: 10,
  RESP_GET_STATUS: 11,
  CMD_SET_CONFIG: 12,
  RESP_SET_CONFIG: 13,
  CMD_APPLY_CONFIG: 14,
  RESP_APPLY_CONFIG: 15
};

/**
 * @return {proto.WiFiConfigPayload.PayloadCase}
 */
proto.WiFiConfigPayload.prototype.getPayloadCase = function() {
  return /** @type {proto.WiFiConfigPayload.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.WiFiConfigPayload.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WiFiConfigPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.WiFiConfigPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WiFiConfigPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WiFiConfigPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    msg: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cmdGetStatus: (f = msg.getCmdGetStatus()) && proto.CmdGetStatus.toObject(includeInstance, f),
    respGetStatus: (f = msg.getRespGetStatus()) && proto.RespGetStatus.toObject(includeInstance, f),
    cmdSetConfig: (f = msg.getCmdSetConfig()) && proto.CmdSetConfig.toObject(includeInstance, f),
    respSetConfig: (f = msg.getRespSetConfig()) && proto.RespSetConfig.toObject(includeInstance, f),
    cmdApplyConfig: (f = msg.getCmdApplyConfig()) && proto.CmdApplyConfig.toObject(includeInstance, f),
    respApplyConfig: (f = msg.getRespApplyConfig()) && proto.RespApplyConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WiFiConfigPayload}
 */
proto.WiFiConfigPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WiFiConfigPayload;
  return proto.WiFiConfigPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WiFiConfigPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WiFiConfigPayload}
 */
proto.WiFiConfigPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.WiFiConfigMsgType} */ (reader.readEnum());
      msg.setMsg(value);
      break;
    case 10:
      var value = new proto.CmdGetStatus;
      reader.readMessage(value,proto.CmdGetStatus.deserializeBinaryFromReader);
      msg.setCmdGetStatus(value);
      break;
    case 11:
      var value = new proto.RespGetStatus;
      reader.readMessage(value,proto.RespGetStatus.deserializeBinaryFromReader);
      msg.setRespGetStatus(value);
      break;
    case 12:
      var value = new proto.CmdSetConfig;
      reader.readMessage(value,proto.CmdSetConfig.deserializeBinaryFromReader);
      msg.setCmdSetConfig(value);
      break;
    case 13:
      var value = new proto.RespSetConfig;
      reader.readMessage(value,proto.RespSetConfig.deserializeBinaryFromReader);
      msg.setRespSetConfig(value);
      break;
    case 14:
      var value = new proto.CmdApplyConfig;
      reader.readMessage(value,proto.CmdApplyConfig.deserializeBinaryFromReader);
      msg.setCmdApplyConfig(value);
      break;
    case 15:
      var value = new proto.RespApplyConfig;
      reader.readMessage(value,proto.RespApplyConfig.deserializeBinaryFromReader);
      msg.setRespApplyConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WiFiConfigPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WiFiConfigPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WiFiConfigPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WiFiConfigPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsg();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCmdGetStatus();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.CmdGetStatus.serializeBinaryToWriter
    );
  }
  f = message.getRespGetStatus();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.RespGetStatus.serializeBinaryToWriter
    );
  }
  f = message.getCmdSetConfig();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.CmdSetConfig.serializeBinaryToWriter
    );
  }
  f = message.getRespSetConfig();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.RespSetConfig.serializeBinaryToWriter
    );
  }
  f = message.getCmdApplyConfig();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.CmdApplyConfig.serializeBinaryToWriter
    );
  }
  f = message.getRespApplyConfig();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.RespApplyConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional WiFiConfigMsgType msg = 1;
 * @return {!proto.WiFiConfigMsgType}
 */
proto.WiFiConfigPayload.prototype.getMsg = function() {
  return /** @type {!proto.WiFiConfigMsgType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.WiFiConfigMsgType} value
 * @return {!proto.WiFiConfigPayload} returns this
 */
proto.WiFiConfigPayload.prototype.setMsg = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional CmdGetStatus cmd_get_status = 10;
 * @return {?proto.CmdGetStatus}
 */
proto.WiFiConfigPayload.prototype.getCmdGetStatus = function() {
  return /** @type{?proto.CmdGetStatus} */ (
    jspb.Message.getWrapperField(this, proto.CmdGetStatus, 10));
};


/**
 * @param {?proto.CmdGetStatus|undefined} value
 * @return {!proto.WiFiConfigPayload} returns this
*/
proto.WiFiConfigPayload.prototype.setCmdGetStatus = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.WiFiConfigPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.WiFiConfigPayload} returns this
 */
proto.WiFiConfigPayload.prototype.clearCmdGetStatus = function() {
  return this.setCmdGetStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WiFiConfigPayload.prototype.hasCmdGetStatus = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional RespGetStatus resp_get_status = 11;
 * @return {?proto.RespGetStatus}
 */
proto.WiFiConfigPayload.prototype.getRespGetStatus = function() {
  return /** @type{?proto.RespGetStatus} */ (
    jspb.Message.getWrapperField(this, proto.RespGetStatus, 11));
};


/**
 * @param {?proto.RespGetStatus|undefined} value
 * @return {!proto.WiFiConfigPayload} returns this
*/
proto.WiFiConfigPayload.prototype.setRespGetStatus = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.WiFiConfigPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.WiFiConfigPayload} returns this
 */
proto.WiFiConfigPayload.prototype.clearRespGetStatus = function() {
  return this.setRespGetStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WiFiConfigPayload.prototype.hasRespGetStatus = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional CmdSetConfig cmd_set_config = 12;
 * @return {?proto.CmdSetConfig}
 */
proto.WiFiConfigPayload.prototype.getCmdSetConfig = function() {
  return /** @type{?proto.CmdSetConfig} */ (
    jspb.Message.getWrapperField(this, proto.CmdSetConfig, 12));
};


/**
 * @param {?proto.CmdSetConfig|undefined} value
 * @return {!proto.WiFiConfigPayload} returns this
*/
proto.WiFiConfigPayload.prototype.setCmdSetConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.WiFiConfigPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.WiFiConfigPayload} returns this
 */
proto.WiFiConfigPayload.prototype.clearCmdSetConfig = function() {
  return this.setCmdSetConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WiFiConfigPayload.prototype.hasCmdSetConfig = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional RespSetConfig resp_set_config = 13;
 * @return {?proto.RespSetConfig}
 */
proto.WiFiConfigPayload.prototype.getRespSetConfig = function() {
  return /** @type{?proto.RespSetConfig} */ (
    jspb.Message.getWrapperField(this, proto.RespSetConfig, 13));
};


/**
 * @param {?proto.RespSetConfig|undefined} value
 * @return {!proto.WiFiConfigPayload} returns this
*/
proto.WiFiConfigPayload.prototype.setRespSetConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.WiFiConfigPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.WiFiConfigPayload} returns this
 */
proto.WiFiConfigPayload.prototype.clearRespSetConfig = function() {
  return this.setRespSetConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WiFiConfigPayload.prototype.hasRespSetConfig = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional CmdApplyConfig cmd_apply_config = 14;
 * @return {?proto.CmdApplyConfig}
 */
proto.WiFiConfigPayload.prototype.getCmdApplyConfig = function() {
  return /** @type{?proto.CmdApplyConfig} */ (
    jspb.Message.getWrapperField(this, proto.CmdApplyConfig, 14));
};


/**
 * @param {?proto.CmdApplyConfig|undefined} value
 * @return {!proto.WiFiConfigPayload} returns this
*/
proto.WiFiConfigPayload.prototype.setCmdApplyConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.WiFiConfigPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.WiFiConfigPayload} returns this
 */
proto.WiFiConfigPayload.prototype.clearCmdApplyConfig = function() {
  return this.setCmdApplyConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WiFiConfigPayload.prototype.hasCmdApplyConfig = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional RespApplyConfig resp_apply_config = 15;
 * @return {?proto.RespApplyConfig}
 */
proto.WiFiConfigPayload.prototype.getRespApplyConfig = function() {
  return /** @type{?proto.RespApplyConfig} */ (
    jspb.Message.getWrapperField(this, proto.RespApplyConfig, 15));
};


/**
 * @param {?proto.RespApplyConfig|undefined} value
 * @return {!proto.WiFiConfigPayload} returns this
*/
proto.WiFiConfigPayload.prototype.setRespApplyConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.WiFiConfigPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.WiFiConfigPayload} returns this
 */
proto.WiFiConfigPayload.prototype.clearRespApplyConfig = function() {
  return this.setRespApplyConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WiFiConfigPayload.prototype.hasRespApplyConfig = function() {
  return jspb.Message.getField(this, 15) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CmdScanStart.prototype.toObject = function(opt_includeInstance) {
  return proto.CmdScanStart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CmdScanStart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CmdScanStart.toObject = function(includeInstance, msg) {
  var f, obj = {
    blocking: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    passive: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    groupChannels: jspb.Message.getFieldWithDefault(msg, 3, 0),
    periodMs: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CmdScanStart}
 */
proto.CmdScanStart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CmdScanStart;
  return proto.CmdScanStart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CmdScanStart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CmdScanStart}
 */
proto.CmdScanStart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBlocking(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPassive(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGroupChannels(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPeriodMs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CmdScanStart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CmdScanStart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CmdScanStart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CmdScanStart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlocking();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getPassive();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getGroupChannels();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getPeriodMs();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional bool blocking = 1;
 * @return {boolean}
 */
proto.CmdScanStart.prototype.getBlocking = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.CmdScanStart} returns this
 */
proto.CmdScanStart.prototype.setBlocking = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool passive = 2;
 * @return {boolean}
 */
proto.CmdScanStart.prototype.getPassive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.CmdScanStart} returns this
 */
proto.CmdScanStart.prototype.setPassive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional uint32 group_channels = 3;
 * @return {number}
 */
proto.CmdScanStart.prototype.getGroupChannels = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.CmdScanStart} returns this
 */
proto.CmdScanStart.prototype.setGroupChannels = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 period_ms = 4;
 * @return {number}
 */
proto.CmdScanStart.prototype.getPeriodMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.CmdScanStart} returns this
 */
proto.CmdScanStart.prototype.setPeriodMs = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RespScanStart.prototype.toObject = function(opt_includeInstance) {
  return proto.RespScanStart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RespScanStart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RespScanStart.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RespScanStart}
 */
proto.RespScanStart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RespScanStart;
  return proto.RespScanStart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RespScanStart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RespScanStart}
 */
proto.RespScanStart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RespScanStart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RespScanStart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RespScanStart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RespScanStart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CmdScanStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.CmdScanStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CmdScanStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CmdScanStatus.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CmdScanStatus}
 */
proto.CmdScanStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CmdScanStatus;
  return proto.CmdScanStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CmdScanStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CmdScanStatus}
 */
proto.CmdScanStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CmdScanStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CmdScanStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CmdScanStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CmdScanStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RespScanStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.RespScanStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RespScanStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RespScanStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    scanFinished: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    resultCount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RespScanStatus}
 */
proto.RespScanStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RespScanStatus;
  return proto.RespScanStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RespScanStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RespScanStatus}
 */
proto.RespScanStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setScanFinished(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResultCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RespScanStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RespScanStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RespScanStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RespScanStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScanFinished();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getResultCount();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional bool scan_finished = 1;
 * @return {boolean}
 */
proto.RespScanStatus.prototype.getScanFinished = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.RespScanStatus} returns this
 */
proto.RespScanStatus.prototype.setScanFinished = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional uint32 result_count = 2;
 * @return {number}
 */
proto.RespScanStatus.prototype.getResultCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.RespScanStatus} returns this
 */
proto.RespScanStatus.prototype.setResultCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CmdScanResult.prototype.toObject = function(opt_includeInstance) {
  return proto.CmdScanResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CmdScanResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CmdScanResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    startIndex: jspb.Message.getFieldWithDefault(msg, 1, 0),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CmdScanResult}
 */
proto.CmdScanResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CmdScanResult;
  return proto.CmdScanResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CmdScanResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CmdScanResult}
 */
proto.CmdScanResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStartIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CmdScanResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CmdScanResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CmdScanResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CmdScanResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 start_index = 1;
 * @return {number}
 */
proto.CmdScanResult.prototype.getStartIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.CmdScanResult} returns this
 */
proto.CmdScanResult.prototype.setStartIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 count = 2;
 * @return {number}
 */
proto.CmdScanResult.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.CmdScanResult} returns this
 */
proto.CmdScanResult.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WiFiScanResult.prototype.toObject = function(opt_includeInstance) {
  return proto.WiFiScanResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WiFiScanResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WiFiScanResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    ssid: msg.getSsid_asB64(),
    channel: jspb.Message.getFieldWithDefault(msg, 2, 0),
    rssi: jspb.Message.getFieldWithDefault(msg, 3, 0),
    bssid: msg.getBssid_asB64(),
    auth: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WiFiScanResult}
 */
proto.WiFiScanResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WiFiScanResult;
  return proto.WiFiScanResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WiFiScanResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WiFiScanResult}
 */
proto.WiFiScanResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSsid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChannel(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRssi(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBssid(value);
      break;
    case 5:
      var value = /** @type {!proto.WifiAuthMode} */ (reader.readEnum());
      msg.setAuth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WiFiScanResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WiFiScanResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WiFiScanResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WiFiScanResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSsid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getChannel();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getRssi();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getBssid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getAuth();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional bytes ssid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.WiFiScanResult.prototype.getSsid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes ssid = 1;
 * This is a type-conversion wrapper around `getSsid()`
 * @return {string}
 */
proto.WiFiScanResult.prototype.getSsid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSsid()));
};


/**
 * optional bytes ssid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSsid()`
 * @return {!Uint8Array}
 */
proto.WiFiScanResult.prototype.getSsid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSsid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.WiFiScanResult} returns this
 */
proto.WiFiScanResult.prototype.setSsid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint32 channel = 2;
 * @return {number}
 */
proto.WiFiScanResult.prototype.getChannel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.WiFiScanResult} returns this
 */
proto.WiFiScanResult.prototype.setChannel = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 rssi = 3;
 * @return {number}
 */
proto.WiFiScanResult.prototype.getRssi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.WiFiScanResult} returns this
 */
proto.WiFiScanResult.prototype.setRssi = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes bssid = 4;
 * @return {!(string|Uint8Array)}
 */
proto.WiFiScanResult.prototype.getBssid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes bssid = 4;
 * This is a type-conversion wrapper around `getBssid()`
 * @return {string}
 */
proto.WiFiScanResult.prototype.getBssid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBssid()));
};


/**
 * optional bytes bssid = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBssid()`
 * @return {!Uint8Array}
 */
proto.WiFiScanResult.prototype.getBssid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBssid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.WiFiScanResult} returns this
 */
proto.WiFiScanResult.prototype.setBssid = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional WifiAuthMode auth = 5;
 * @return {!proto.WifiAuthMode}
 */
proto.WiFiScanResult.prototype.getAuth = function() {
  return /** @type {!proto.WifiAuthMode} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.WifiAuthMode} value
 * @return {!proto.WiFiScanResult} returns this
 */
proto.WiFiScanResult.prototype.setAuth = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.RespScanResult.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RespScanResult.prototype.toObject = function(opt_includeInstance) {
  return proto.RespScanResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RespScanResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RespScanResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    entriesList: jspb.Message.toObjectList(msg.getEntriesList(),
    proto.WiFiScanResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RespScanResult}
 */
proto.RespScanResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RespScanResult;
  return proto.RespScanResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RespScanResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RespScanResult}
 */
proto.RespScanResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.WiFiScanResult;
      reader.readMessage(value,proto.WiFiScanResult.deserializeBinaryFromReader);
      msg.addEntries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RespScanResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RespScanResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RespScanResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RespScanResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.WiFiScanResult.serializeBinaryToWriter
    );
  }
};


/**
 * repeated WiFiScanResult entries = 1;
 * @return {!Array<!proto.WiFiScanResult>}
 */
proto.RespScanResult.prototype.getEntriesList = function() {
  return /** @type{!Array<!proto.WiFiScanResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.WiFiScanResult, 1));
};


/**
 * @param {!Array<!proto.WiFiScanResult>} value
 * @return {!proto.RespScanResult} returns this
*/
proto.RespScanResult.prototype.setEntriesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.WiFiScanResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.WiFiScanResult}
 */
proto.RespScanResult.prototype.addEntries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.WiFiScanResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.RespScanResult} returns this
 */
proto.RespScanResult.prototype.clearEntriesList = function() {
  return this.setEntriesList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.WiFiScanPayload.oneofGroups_ = [[10,11,12,13,14,15]];

/**
 * @enum {number}
 */
proto.WiFiScanPayload.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  CMD_SCAN_START: 10,
  RESP_SCAN_START: 11,
  CMD_SCAN_STATUS: 12,
  RESP_SCAN_STATUS: 13,
  CMD_SCAN_RESULT: 14,
  RESP_SCAN_RESULT: 15
};

/**
 * @return {proto.WiFiScanPayload.PayloadCase}
 */
proto.WiFiScanPayload.prototype.getPayloadCase = function() {
  return /** @type {proto.WiFiScanPayload.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.WiFiScanPayload.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WiFiScanPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.WiFiScanPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WiFiScanPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WiFiScanPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    msg: jspb.Message.getFieldWithDefault(msg, 1, 0),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    cmdScanStart: (f = msg.getCmdScanStart()) && proto.CmdScanStart.toObject(includeInstance, f),
    respScanStart: (f = msg.getRespScanStart()) && proto.RespScanStart.toObject(includeInstance, f),
    cmdScanStatus: (f = msg.getCmdScanStatus()) && proto.CmdScanStatus.toObject(includeInstance, f),
    respScanStatus: (f = msg.getRespScanStatus()) && proto.RespScanStatus.toObject(includeInstance, f),
    cmdScanResult: (f = msg.getCmdScanResult()) && proto.CmdScanResult.toObject(includeInstance, f),
    respScanResult: (f = msg.getRespScanResult()) && proto.RespScanResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WiFiScanPayload}
 */
proto.WiFiScanPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WiFiScanPayload;
  return proto.WiFiScanPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WiFiScanPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WiFiScanPayload}
 */
proto.WiFiScanPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.WiFiScanMsgType} */ (reader.readEnum());
      msg.setMsg(value);
      break;
    case 2:
      var value = /** @type {!proto.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 10:
      var value = new proto.CmdScanStart;
      reader.readMessage(value,proto.CmdScanStart.deserializeBinaryFromReader);
      msg.setCmdScanStart(value);
      break;
    case 11:
      var value = new proto.RespScanStart;
      reader.readMessage(value,proto.RespScanStart.deserializeBinaryFromReader);
      msg.setRespScanStart(value);
      break;
    case 12:
      var value = new proto.CmdScanStatus;
      reader.readMessage(value,proto.CmdScanStatus.deserializeBinaryFromReader);
      msg.setCmdScanStatus(value);
      break;
    case 13:
      var value = new proto.RespScanStatus;
      reader.readMessage(value,proto.RespScanStatus.deserializeBinaryFromReader);
      msg.setRespScanStatus(value);
      break;
    case 14:
      var value = new proto.CmdScanResult;
      reader.readMessage(value,proto.CmdScanResult.deserializeBinaryFromReader);
      msg.setCmdScanResult(value);
      break;
    case 15:
      var value = new proto.RespScanResult;
      reader.readMessage(value,proto.RespScanResult.deserializeBinaryFromReader);
      msg.setRespScanResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WiFiScanPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WiFiScanPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WiFiScanPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WiFiScanPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsg();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCmdScanStart();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.CmdScanStart.serializeBinaryToWriter
    );
  }
  f = message.getRespScanStart();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.RespScanStart.serializeBinaryToWriter
    );
  }
  f = message.getCmdScanStatus();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.CmdScanStatus.serializeBinaryToWriter
    );
  }
  f = message.getRespScanStatus();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.RespScanStatus.serializeBinaryToWriter
    );
  }
  f = message.getCmdScanResult();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.CmdScanResult.serializeBinaryToWriter
    );
  }
  f = message.getRespScanResult();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.RespScanResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional WiFiScanMsgType msg = 1;
 * @return {!proto.WiFiScanMsgType}
 */
proto.WiFiScanPayload.prototype.getMsg = function() {
  return /** @type {!proto.WiFiScanMsgType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.WiFiScanMsgType} value
 * @return {!proto.WiFiScanPayload} returns this
 */
proto.WiFiScanPayload.prototype.setMsg = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {!proto.Status}
 */
proto.WiFiScanPayload.prototype.getStatus = function() {
  return /** @type {!proto.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Status} value
 * @return {!proto.WiFiScanPayload} returns this
 */
proto.WiFiScanPayload.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional CmdScanStart cmd_scan_start = 10;
 * @return {?proto.CmdScanStart}
 */
proto.WiFiScanPayload.prototype.getCmdScanStart = function() {
  return /** @type{?proto.CmdScanStart} */ (
    jspb.Message.getWrapperField(this, proto.CmdScanStart, 10));
};


/**
 * @param {?proto.CmdScanStart|undefined} value
 * @return {!proto.WiFiScanPayload} returns this
*/
proto.WiFiScanPayload.prototype.setCmdScanStart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.WiFiScanPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.WiFiScanPayload} returns this
 */
proto.WiFiScanPayload.prototype.clearCmdScanStart = function() {
  return this.setCmdScanStart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WiFiScanPayload.prototype.hasCmdScanStart = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional RespScanStart resp_scan_start = 11;
 * @return {?proto.RespScanStart}
 */
proto.WiFiScanPayload.prototype.getRespScanStart = function() {
  return /** @type{?proto.RespScanStart} */ (
    jspb.Message.getWrapperField(this, proto.RespScanStart, 11));
};


/**
 * @param {?proto.RespScanStart|undefined} value
 * @return {!proto.WiFiScanPayload} returns this
*/
proto.WiFiScanPayload.prototype.setRespScanStart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.WiFiScanPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.WiFiScanPayload} returns this
 */
proto.WiFiScanPayload.prototype.clearRespScanStart = function() {
  return this.setRespScanStart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WiFiScanPayload.prototype.hasRespScanStart = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional CmdScanStatus cmd_scan_status = 12;
 * @return {?proto.CmdScanStatus}
 */
proto.WiFiScanPayload.prototype.getCmdScanStatus = function() {
  return /** @type{?proto.CmdScanStatus} */ (
    jspb.Message.getWrapperField(this, proto.CmdScanStatus, 12));
};


/**
 * @param {?proto.CmdScanStatus|undefined} value
 * @return {!proto.WiFiScanPayload} returns this
*/
proto.WiFiScanPayload.prototype.setCmdScanStatus = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.WiFiScanPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.WiFiScanPayload} returns this
 */
proto.WiFiScanPayload.prototype.clearCmdScanStatus = function() {
  return this.setCmdScanStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WiFiScanPayload.prototype.hasCmdScanStatus = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional RespScanStatus resp_scan_status = 13;
 * @return {?proto.RespScanStatus}
 */
proto.WiFiScanPayload.prototype.getRespScanStatus = function() {
  return /** @type{?proto.RespScanStatus} */ (
    jspb.Message.getWrapperField(this, proto.RespScanStatus, 13));
};


/**
 * @param {?proto.RespScanStatus|undefined} value
 * @return {!proto.WiFiScanPayload} returns this
*/
proto.WiFiScanPayload.prototype.setRespScanStatus = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.WiFiScanPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.WiFiScanPayload} returns this
 */
proto.WiFiScanPayload.prototype.clearRespScanStatus = function() {
  return this.setRespScanStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WiFiScanPayload.prototype.hasRespScanStatus = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional CmdScanResult cmd_scan_result = 14;
 * @return {?proto.CmdScanResult}
 */
proto.WiFiScanPayload.prototype.getCmdScanResult = function() {
  return /** @type{?proto.CmdScanResult} */ (
    jspb.Message.getWrapperField(this, proto.CmdScanResult, 14));
};


/**
 * @param {?proto.CmdScanResult|undefined} value
 * @return {!proto.WiFiScanPayload} returns this
*/
proto.WiFiScanPayload.prototype.setCmdScanResult = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.WiFiScanPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.WiFiScanPayload} returns this
 */
proto.WiFiScanPayload.prototype.clearCmdScanResult = function() {
  return this.setCmdScanResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WiFiScanPayload.prototype.hasCmdScanResult = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional RespScanResult resp_scan_result = 15;
 * @return {?proto.RespScanResult}
 */
proto.WiFiScanPayload.prototype.getRespScanResult = function() {
  return /** @type{?proto.RespScanResult} */ (
    jspb.Message.getWrapperField(this, proto.RespScanResult, 15));
};


/**
 * @param {?proto.RespScanResult|undefined} value
 * @return {!proto.WiFiScanPayload} returns this
*/
proto.WiFiScanPayload.prototype.setRespScanResult = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.WiFiScanPayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.WiFiScanPayload} returns this
 */
proto.WiFiScanPayload.prototype.clearRespScanResult = function() {
  return this.setRespScanResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WiFiScanPayload.prototype.hasRespScanResult = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * @enum {number}
 */
proto.Status = {
  SUCCESS: 0,
  INVALIDSECSCHEME: 1,
  INVALIDPROTO: 2,
  TOOMANYSESSIONS: 3,
  INVALIDARGUMENT: 4,
  INTERNALERROR: 5,
  CRYPTOERROR: 6,
  INVALIDSESSION: 7
};

/**
 * @enum {number}
 */
proto.WifiStationState = {
  CONNECTED: 0,
  CONNECTING: 1,
  DISCONNECTED: 2,
  CONNECTIONFAILED: 3
};

/**
 * @enum {number}
 */
proto.WifiConnectFailedReason = {
  AUTHERROR: 0,
  NETWORKNOTFOUND: 1
};

/**
 * @enum {number}
 */
proto.WifiAuthMode = {
  OPEN: 0,
  WEP: 1,
  WPA_PSK: 2,
  WPA2_PSK: 3,
  WPA_WPA2_PSK: 4,
  WPA2_ENTERPRISE: 5,
  WPA3_PSK: 6,
  WPA2_WPA3_PSK: 7
};

/**
 * @enum {number}
 */
proto.WiFiCtrlMsgType = {
  TYPECTRLRESERVED: 0,
  TYPECMDCTRLRESET: 1,
  TYPERESPCTRLRESET: 2,
  TYPECMDCTRLREPROV: 3,
  TYPERESPCTRLREPROV: 4
};

/**
 * @enum {number}
 */
proto.WiFiConfigMsgType = {
  TYPECMDGETSTATUS: 0,
  TYPERESPGETSTATUS: 1,
  TYPECMDSETCONFIG: 2,
  TYPERESPSETCONFIG: 3,
  TYPECMDAPPLYCONFIG: 4,
  TYPERESPAPPLYCONFIG: 5
};

/**
 * @enum {number}
 */
proto.WiFiScanMsgType = {
  TYPECMDSCANSTART: 0,
  TYPERESPSCANSTART: 1,
  TYPECMDSCANSTATUS: 2,
  TYPERESPSCANSTATUS: 3,
  TYPECMDSCANRESULT: 4,
  TYPERESPSCANRESULT: 5
};

goog.object.extend(exports, proto);
